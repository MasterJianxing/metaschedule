2023-04-11 10:46:37 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_add"
2023-04-11 10:46:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float16"], p1: T.Buffer[(T.int64(3), T.int64(1), T.int64(1)), "float16"], T_add: T.Buffer[(T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float16"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(224), T.int64(224)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3], p1[v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = p0[v_ax0, v_ax1, v_ax2, v_ax3] + p1[v_ax1, T.int64(0), T.int64(0)]
    

2023-04-11 10:46:37 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-11 10:46:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float16"], p1: T.Buffer[(T.int64(3), T.int64(1), T.int64(1)), "float16"], T_add: T.Buffer[(T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float16"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4704), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(50176))
                    v_ax2 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(50176) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(224))
                    T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3], p1[v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3] = p0[v_ax0, v_ax1, v_ax2, v_ax3] + p1[v_ax1, T.int64(0), T.int64(0)]
    

b0 = sch.get_block(name="T_add", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
