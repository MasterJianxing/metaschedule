2023-04-11 10:46:37 [INFO] [task_scheduler.cc:160] Initializing Task #9: "fused_multiply_add_nn_relu"
2023-04-11 10:46:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float16"], p1: T.Buffer[(T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float16"], p2: T.Buffer[(T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float16"], T_relu: T.Buffer[(T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float16"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        T_multiply = T.alloc_buffer([T.int64(1), T.int64(256), T.int64(56), T.int64(56)], dtype="float16")
        T_add = T.alloc_buffer([T.int64(1), T.int64(256), T.int64(56), T.int64(56)], dtype="float16")
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3], p1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = p0[v_ax0, v_ax1, v_ax2, v_ax3] * p1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float16(0))
    

2023-04-11 10:46:37 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-11 10:46:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float16"], p1: T.Buffer[(T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float16"], p2: T.Buffer[(T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float16"], T_relu: T.Buffer[(T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float16"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(4)):
                    with T.block("T_multiply"):
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3], p1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p0[v_ax0, v_ax1, v_ax2, v_ax3] * p1[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float16(0))
    

b0 = sch.get_block(name="T_multiply", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l3, l4, l5, l6 = sch.get_loops(block=b0)
l7 = sch.fuse(l3, l4, l5, l6, preserve_unit_iters=True)
l8, l9, l10 = sch.split(loop=l7, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l9, l10, l8)
sch.bind(loop=l9, thread_axis="blockIdx.x")
sch.bind(loop=l10, thread_axis="threadIdx.x")
